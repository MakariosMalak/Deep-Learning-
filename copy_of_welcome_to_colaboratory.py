# -*- coding: utf-8 -*-
"""Copy of Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fa3kuBzcLu1eyW2uAa7rSNQ_S_vXa4vy
"""

import os
from PIL import Image
import numpy as np

# Directory containing your images
directory_path = "/content/drive/MyDrive/Deep Learning/Data 1/Train/Class (7)"
directory_path1 = "/content/drive/MyDrive/Deep Learning/Data 1/Train/Class (9)"
directory_path2 = "/content/drive/MyDrive/Deep Learning/Data 1/Test/Class (7)"
directory_path3 = "/content/drive/MyDrive/Deep Learning/Data 1/Test/Class (9)"

# Initialize an empty list to store the images and labels
train = []
labels = []

test = []
labels1 = []

from google.colab import drive
drive.mount('/content/drive')

# Iterate through all files in the directory
for filename in os.listdir(directory_path):
    if filename.endswith(".jpg"):
        # Construct the full file path
        image_path = os.path.join(directory_path, filename)

        # Read the image using Pillow
        image = Image.open(image_path)

        # Append the image to the list
        train.append(image)

        # Assign a label of 0 to the image
        labels.append(0)

for filename in os.listdir(directory_path1):
    if filename.endswith(".jpg"):
        # Construct the full file path
        image_path = os.path.join(directory_path1, filename)

        # Read the image using Pillow
        image = Image.open(image_path)

        # Append the image to the list
        train.append(image)

        # Assign a label of 0 to the image
        labels.append(1)
for filename in os.listdir(directory_path2):
    if filename.endswith(".jpg"):
        # Construct the full file path
        image_path = os.path.join(directory_path2, filename)

        # Read the image using Pillow
        image = Image.open(image_path)

        # Append the image to the list
        test.append(image)

        # Assign a label of 0 to the image
        labels1.append(0)

for filename in os.listdir(directory_path3):
    if filename.endswith(".jpg"):
        # Construct the full file path
        image_path = os.path.join(directory_path3, filename)

        # Read the image using Pillow
        image = Image.open(image_path)

        # Append the image to the list
        test.append(image)

        # Assign a label of 0 to the image
        labels1.append(1)

# Convert the list of images to a numpy array
dataset1 = np.array(train)
labels = np.array(labels)

dataset2 = np.array(test)
labels1 = np.array(labels1)

import matplotlib.pyplot as plt

# Function to display images
def show_images(images):
    fig, axes = plt.subplots(1, len(images), figsize=(256, 256))
    for i, image in enumerate(images):
        axes[i].imshow(image)
        axes[i].axis('off')
    plt.show()

# Display images in the train array
show_images(dataset1)

# Display images in the test array
# show_images(dataset2)

# Import necessary libraries
import os
from PIL import Image
import numpy as np
import imgaug as ia
import imgaug.augmenters as iaa

# Define augmentation pipeline
seq = iaa.Sequential([
    iaa.Fliplr(0.5),  # Horizontal flip with 50% probability
    iaa.Flipud(0.5),  # Vertical flip with 50% probability
    iaa.CropAndPad(percent=(-0.2, 0.2)),  # Random crop and pad
    iaa.Affine(
        scale=(0.8, 1.2),  # Random scaling
        translate_percent=(-0.1, 0.1),  # Random translation
        rotate=(-15, 15),  # Random rotation
        shear=(-8, 8),  # Random shear
    ),
    iaa.GaussianBlur(sigma=(0.0, 0.5)),  # Add Gaussian blur
])

# Define the directory containing images
directory_path = "/content/drive/MyDrive/Deep Learning/Data 1/Train/Class (7)"

# Initialize empty arrays
images = []
augmented_images = []

# Loop through all files in the directory
for filename in os.listdir(directory_path):
    if filename.endswith(".jpg") or filename.endswith(".png"):  # Check for image extensions
        # Construct the full file path
        image_path = os.path.join(directory_path, filename)

        # Read the image using Pillow
        image = Image.open(image_path)

        # Convert image to NumPy array
        image_array = np.array(image)

        # Append original image to the list
        images.append(image_array)

        # Apply augmentation to the image
        augmented_image_array = seq(image=image_array)

        # Append augmented image to the list
        augmented_images.append(augmented_image_array)

# Convert image arrays to NumPy arrays
images = np.array(images)
augmented_images = np.array(augmented_images)

# Save augmented images (optional)
# for i, image in enumerate(augmented_images):
#     ia.imwrite(image, f"augmented_image_{i}.jpg")

import matplotlib.pyplot as plt

# Function to display images
def show_images(images):
    fig, axes = plt.subplots(1, len(images), figsize=(256, 256))
    for i, image in enumerate(images):
        axes[i].imshow(image)
        axes[i].axis('off')
    plt.show()

# Display images in the train array
show_images(dataset1)

# Display images in the test array
# show_images(dataset2)

import os
from PIL import Image
import numpy as np
from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.layers import Dense, Flatten, Dropout
from tensorflow.keras.models import Model

# Directory containing your images
directory_path = "/content/drive/MyDrive/Deep Learning/Data 1/Train/Class (7)"
directory_path = "/content/drive/MyDrive/Deep Learning/Data 1/Train/Class (9)"
directory_path = "/content/drive/MyDrive/Deep Learning/Data 1/Test/Class (7)"
directory_path = "/content/drive/MyDrive/Deep Learning/Data 1/Test/Class (9)"

# Initialize empty arrays
images = []
labels = []

# Loop through all files in the directory
for filename in os.listdir(directory_path):
    if filename.endswith(".jpg") or filename.endswith(".png"):  # Check for image extensions
        # Construct the full file path
        image_path = os.path.join(directory_path, filename)

        # Read the image using Pillow
        image = Image.open(image_path)

        # Convert image to RGB format
        image = image.convert("RGB")

        # Resize the image to match VGG16 input size
        image = image.resize((224, 224))

        # Convert image to NumPy array
        image_array = np.array(image)

        # Normalize pixel values between 0 and 1
        image_array = image_array / 255.0

        # Append the preprocessed image to the list
        images.append(image_array)

        # Assign label based on image class (modify according to your data)
        labels.append(0)  # Assuming two classes: 0 and 1

# Convert image arrays and labels to NumPy arrays
images = np.array(images)
labels = np.array(labels)

# Split data into training and validation sets
from sklearn.model_selection import train_test_split
X_train, X_val, y_train, y_val = train_test_split(images, labels, test_size=0.2, random_state=42)

# Load the pre-trained VGG16 model
base_model = VGG16(include_top=False, weights="imagenet", input_shape=(224, 224, 3))

# Freeze the base model weights to prevent further training
for layer in base_model.layers:
    layer.trainable = False

# Add new layers for classification
top_model = base_model.output
top_model = Flatten()(top_model)
top_model = Dense(128, activation="relu")(top_model)
top_model = Dropout(0.5)(top_model)
top_model = Dense(2, activation="softmax")(top_model)  # Adjust output layer based on number of classes

# Combine the base and top models
model = Model(inputs=base_model.input, outputs=top_model)

# Compile the model
model.compile(loss="sparse_categorical_crossentropy", optimizer="adam", metrics=["accuracy"])

# Train the model
history = model.fit(X_train, y_train, epochs=10, validation_data=(X_val, y_val))

# Evaluate the model
model.evaluate(X_val, y_val)

# Save the model (optional)
model.save("my_vgg16_model.h5")